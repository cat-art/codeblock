import java.util.*;

public class Test {
	public static void main(String[] args) {
		 System.out.println("给你一个1至100之间的整数,请猜测这个数");
         int realNumber=(int)(Math.random()*100)+1;
         int yourGuess=0;
         Scanner reader=new Scanner(System.in);     
         System.out.println("输入您的猜测:");
        yourGuess=reader.nextInt(); 		// reader调用方法获取用户从键盘键入的整数，并赋值给yourGuess
         while (yourGuess==realNumber){  	// 循环条件
          if (yourGuess>realNumber){     	// 条件代码
               System.out.println("猜大了,请再猜:");
               yourGuess=reader.nextInt(); 	// reader调用方法获取用户从键盘键入的整数，并赋值给yourGuess
            }
            else if(yourGuess<realNumber){  	// 条件代码
                System.out.println("猜小了,请再猜:");
                yourGuess=reader.nextInt();  // reader调用方法获取用户从键盘键入的整数，并赋值给yourGuess
            }
         }
         System.out.println("猜对了!");
	}
}
运行的结果如下：

（2）回文数
   编写一个Java应用程序，用户从键盘输入一个1-99999之间的整数，程序将判断这个数是几位数，并判断这歌数是否是回文数。
Number.java
import java.util.*;

public class Test {
	public static void main(String[] args) {
		int number=0,d5,d4,d3,d2,d1;
        Scanner reader=new Scanner(System.in);     
        System.out.println("从键盘输入一个1至99999之间的数");
        while(reader.hasNextInt()){  
           number=reader.nextInt();
           if(number/100000==0){  	// 判断number在1至99999之间的条件
             d5=number/10000%10;   	// 计算number的最高位（万位）d5
             d4=number/1000%10;   	// 计算number的千位d4
             d3=number/100%10;   	// 计算number的百位d3
              d2=number%100/10;
              d1=number%10;
              if(d5!=0){ // 判断number是5位数的条件
                  System.out.printf("\n%d是5位数", number);
                  if (d5==d1&&d2==d4)  // 判断number是回文数的条件
                     System.out.printf("\t%d是回文数", number);
                  else
                     System.out.printf("\t%d不是回文数", number);
              }
              else if (d5==0&&d4!=0){  // 判断number是4位数的条件
                   System.out.printf("\n%d是4位数",number);
                   if (d4==d1&&d2==d3)  // 判断number是回文数的条件
                      System.out.printf("\t%d是回文数", number);
                   else
                      System.out.printf("\t%d不是回文数",number);
              }
              else if (d5==0&&d4==0&&d3!=0){  // 判断number是3位数的条件
                   System.out.printf("\n%d是3位数", number);
                   if (d1==d3)  // 判断number是回文数的条件
                      System.out.printf("\t%d是回文数", number);
                   else
                     System.out.printf("\t%d不是回文数", number);
              }
              else if(d2!=0){
                   System.out.printf("\n%d是2位数", number);
                   if(d1==d2)
                      System.out.printf("\t%d是回文数", number);
                   else
                     System.out.printf("\t%d不是回文数", number);
              }
              else if(d1!=0){
                   System.out.printf("\n%d是1位数", number);
                   System.out.printf("\t%d是回文数", number);
              }
          }
          else
              System.out.printf("\n%d不在1至99999之间", number);
          System.out.printf("%n可继续输入整数，或输入非整数结束程序%n");
       }
       System.out.println("你输出的数据不是整数");
	}
}
实验结果如下：


(3)数组的排序及查找
  编程使用Arrays类的静态方法purbic void sort(double a[],int start,int end)对数组进行排序，然后编程使用折半法判断一个数是否在这个数组中。
（4）一个简单的的Java applet程序
  掌握开发Java applet程序的三个步骤：编写源文件、编译源文件和运行程序。
FirstApplet.java

import java.util.*;
import java.util.Arrays;

class Search
{
	int search_bin1(int a[], int key,int n)
	{
		int low=0,high=n-1;
		int mid;
		while(high>low)
		{
			mid=(high+low)/2;
			if(key==a[mid])
				return mid;
			else if(key<a[mid])
				high=mid-1;
			else if(key>a[mid])
				low=mid+1;
		}
		return 0;
	}
}


public class Test{    
	public static void main(String[] args) {
		int n;
		int[] a=new int[100];  //声明一个数组
		Scanner sc = new Scanner(System.in);
		System.out.println("请输入n的值:");
		n=sc.nextInt();
		for(int i=0; i<n; i++)
		{
			a[i]= sc.nextInt();
		}
		Arrays.sort(a,0,n);
		for(int i=0; i<n; i++)
		{
			System.out.print(" "+ a[i]);
		}
		System.out.println();
		System.out.println("请输入你要查找的key:");
		int key=sc.nextInt();
		int location;
		Search A= new Search();
        System.out.println(A.search_bin1(a, key,n));
	   }	
	}



